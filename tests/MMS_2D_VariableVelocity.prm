# Listing of Parameters
# ---------------------
subsection meta
    set dim = 2
end
subsection geometry
    set grid_name = hyper_rectangle
    set sizes = 0., 0., 1., 1.
end
subsection verification
    set enabled = true    
    subsection parsed_exact_solution_function
        set Function constants = epsilon=1.e-14, alpha=2, vmax=-5, g=-2, beta=10
        
        set Function expression = if(y < epsilon,g + (g - g*x)*(exp(-beta*t^2) - 1),g + (g - (g*(exp((vmax*x*y)/alpha) - 1))/(exp((vmax*y)/alpha) - 1))*(exp(-beta*t^2) - 1))
    end        
end
subsection parsed_velocity_function
    set Function constants = vmax=-5
    set Function expression = vmax*y; 0
end

subsection parsed_diffusivity_function
    set Function constants = alpha=2
    set Function expression = alpha
end

subsection parsed_source_function

    set Function constants = epsilon=1.e-14, alpha=2, vmax=-5, g=-2, beta=10

    set Function expression = if(y<epsilon,(g*exp(-beta*t^2)*(x - 1)*(2*vmax^2*x^2 - vmax^2*x - 2*vmax^2*x^2*exp(beta*t^2) + 12*alpha*beta*t + vmax^2*x*exp(beta*t^2)))/(6*alpha),- alpha*((exp(-beta*t^2) - 1)*((g*vmax^2*exp((vmax*y)/alpha)*(exp((vmax*x*y)/alpha) - 1))/(alpha^2*(exp((vmax*y)/alpha) - 1)^2) - (2*g*vmax^2*exp((2*vmax*y)/alpha)*(exp((vmax*x*y)/alpha) - 1))/(alpha^2*(exp((vmax*y)/alpha) - 1)^3) - (g*vmax^2*x^2*exp((vmax*x*y)/alpha))/(alpha^2*(exp((vmax*y)/alpha) - 1)) + (2*g*vmax^2*x*exp((vmax*y)/alpha)*exp((vmax*x*y)/alpha))/(alpha^2*(exp((vmax*y)/alpha) - 1)^2)) - (g*vmax^2*y^2*exp((vmax*x*y)/alpha)*(exp(-beta*t^2) - 1))/(alpha^2*(exp((vmax*y)/alpha) - 1))) - 2*beta*t*exp(-beta*t^2)*(g - (g*(exp((vmax*x*y)/alpha) - 1))/(exp((vmax*y)/alpha) - 1)) - (g*vmax^2*y^2*exp((vmax*x*y)/alpha)*(exp(-beta*t^2) - 1))/(alpha*(exp((vmax*y)/alpha) - 1)))

end

subsection initial_values
    
    subsection parsed_function
        
        set Function constants = g=-2
        set Function expression = g*1.000000001
        
    end
    
end
subsection boundary_conditions
    
    set implementation_types = natural, strong, natural, natural
    
    set function_names = parsed, constant, parsed, parsed
    
    set function_double_arguments = -2
    
    subsection parsed_function

        set Function constants = epsilon=1.e-14, alpha=2, vmax=-5, g=-2, beta=10

        set Function expression = if(x<epsilon,(g*vmax*y*(exp(-beta*t^2) - 1))/(exp((vmax*y)/alpha) - 1),if(y<epsilon,-alpha*(exp(-beta*t^2) - 1)*((g*vmax*x)/(2*alpha) - (g*vmax*x^2)/(2*alpha)),alpha*(exp(-beta*t^2) - 1)*((g*vmax*exp(vmax/alpha)*(exp((vmax*x)/alpha) - 1))/(alpha*(exp(vmax/alpha) - 1)^2) - (g*vmax*x*exp((vmax*x)/alpha))/(alpha*(exp(vmax/alpha) - 1)))))
    
    end
    
end
subsection refinement
    set boundaries_to_refine = 0
    set initial_boundary_cycles = 0
    set initial_global_cycles = 4
end
subsection time
    set end_time = 1.
    set global_refinement_levels = 4
    set semi_implicit_theta = 0.5
end
subsection solver
    set max_iterations = 10000
    set normalize_tolerance = false
    set tolerance           = 1e-9
end

subsection output
    set write_solution_vtk = false
end